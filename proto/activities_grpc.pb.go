// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: activities.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivitiesClient is the client API for Activities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivitiesClient interface {
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	GetTopQueries(ctx context.Context, in *GetTopQueriesRequest, opts ...grpc.CallOption) (*GetTopQueriesResponse, error)
	GetQueryDetails(ctx context.Context, in *GetQueryDetailsRequest, opts ...grpc.CallOption) (*GetQueryDetailsResponse, error)
}

type activitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesClient(cc grpc.ClientConnInterface) ActivitiesClient {
	return &activitiesClient{cc}
}

func (c *activitiesClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.Activities/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesClient) GetTopQueries(ctx context.Context, in *GetTopQueriesRequest, opts ...grpc.CallOption) (*GetTopQueriesResponse, error) {
	out := new(GetTopQueriesResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.Activities/GetTopQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesClient) GetQueryDetails(ctx context.Context, in *GetQueryDetailsRequest, opts ...grpc.CallOption) (*GetQueryDetailsResponse, error) {
	out := new(GetQueryDetailsResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.Activities/GetQueryDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesServer is the server API for Activities service.
// All implementations must embed UnimplementedActivitiesServer
// for forward compatibility
type ActivitiesServer interface {
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	GetTopQueries(context.Context, *GetTopQueriesRequest) (*GetTopQueriesResponse, error)
	GetQueryDetails(context.Context, *GetQueryDetailsRequest) (*GetQueryDetailsResponse, error)
	mustEmbedUnimplementedActivitiesServer()
}

// UnimplementedActivitiesServer must be embedded to have forward compatible implementations.
type UnimplementedActivitiesServer struct {
}

func (UnimplementedActivitiesServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedActivitiesServer) GetTopQueries(context.Context, *GetTopQueriesRequest) (*GetTopQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopQueries not implemented")
}
func (UnimplementedActivitiesServer) GetQueryDetails(context.Context, *GetQueryDetailsRequest) (*GetQueryDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryDetails not implemented")
}
func (UnimplementedActivitiesServer) mustEmbedUnimplementedActivitiesServer() {}

// UnsafeActivitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivitiesServer will
// result in compilation errors.
type UnsafeActivitiesServer interface {
	mustEmbedUnimplementedActivitiesServer()
}

func RegisterActivitiesServer(s grpc.ServiceRegistrar, srv ActivitiesServer) {
	s.RegisterService(&Activities_ServiceDesc, srv)
}

func _Activities_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.Activities/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activities_GetTopQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesServer).GetTopQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.Activities/GetTopQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesServer).GetTopQueries(ctx, req.(*GetTopQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activities_GetQueryDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesServer).GetQueryDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.Activities/GetQueryDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesServer).GetQueryDetails(ctx, req.(*GetQueryDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Activities_ServiceDesc is the grpc.ServiceDesc for Activities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borealis.v1beta1.Activities",
	HandlerType: (*ActivitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _Activities_GetProfile_Handler,
		},
		{
			MethodName: "GetTopQueries",
			Handler:    _Activities_GetTopQueries_Handler,
		},
		{
			MethodName: "GetQueryDetails",
			Handler:    _Activities_GetQueryDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activities.proto",
}
