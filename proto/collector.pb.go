// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: collector.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatementsCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsBucket []*MetricsBucket `protobuf:"bytes,1,rep,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty"`
}

func (x *StatementsCollectRequest) Reset() {
	*x = StatementsCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementsCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementsCollectRequest) ProtoMessage() {}

func (x *StatementsCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementsCollectRequest.ProtoReflect.Descriptor instead.
func (*StatementsCollectRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{0}
}

func (x *StatementsCollectRequest) GetMetricsBucket() []*MetricsBucket {
	if x != nil {
		return x.MetricsBucket
	}
	return nil
}

// MetricsBucket is aggregated message created by postgres-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// md5 of digest_text/fingerprint.
	Queryid string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	// digest_text - query signature. Query without values.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Service Name (can be several Services on one Node).
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Several databases can't be combined in a single declarative query.
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	// Several schemas can be combined in a single declarative query.
	Schema string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	// Tables or Collections list.
	Tables []string `protobuf:"bytes,166,rep,name=tables,proto3" json:"tables,omitempty"`
	// client user name.
	Username string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	// client IP or hostname.
	ClientHost string `protobuf:"bytes,7,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"`
	// Node identifier
	NodeId string `protobuf:"bytes,224,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Node name
	NodeName     string `protobuf:"bytes,225,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InstanceName string `protobuf:"bytes,253,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// Node type
	NodeType string `protobuf:"bytes,226,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	// Machine identifier
	MachineId string `protobuf:"bytes,227,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier
	ContainerId string `protobuf:"bytes,228,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name
	ContainerName string `protobuf:"bytes,165,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model
	NodeModel string `protobuf:"bytes,164,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Region name
	Region string `protobuf:"bytes,163,opt,name=region,proto3" json:"region,omitempty"`
	// Availability zone
	Az string `protobuf:"bytes,162,opt,name=az,proto3" json:"az,omitempty"`
	// Service identifier
	ServiceId string `protobuf:"bytes,229,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Type of service
	ServiceType string `protobuf:"bytes,160,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Environment name
	Environment string `protobuf:"bytes,161,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name
	Cluster string `protobuf:"bytes,159,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of replication set
	ReplicationSet string `protobuf:"bytes,158,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Identifier of agent that collect and send metrics.
	AgentId string `protobuf:"bytes,9,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Custom labels names:values.
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,10,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32 `protobuf:"varint,11,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	// One of query example from set found in bucket.
	Example string `protobuf:"bytes,13,opt,name=example,proto3" json:"example,omitempty"`
	// Indicates if the query example is truncated.
	IsTruncated bool `protobuf:"varint,15,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	// Metrics of query example in JSON format.
	ExampleMetrics string `protobuf:"bytes,17,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// How many queries was with warnings in bucket.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,18,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// List of warnings: {code: count}.
	Warnings map[uint64]uint64 `protobuf:"bytes,19,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// How many queries was with error in bucket.
	NumQueriesWithErrors float32 `protobuf:"fixed32,20,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// List of errors: {code: count}.
	Errors map[uint64]uint64 `protobuf:"bytes,21,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Amount queries in this bucket.
	NumQueries            float32 `protobuf:"fixed32,22,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	MQueryTimeCnt         float32 `protobuf:"fixed32,23,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	MQueryTimeSum         float32 `protobuf:"fixed32,24,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	MQueryTimeMin         float32 `protobuf:"fixed32,25,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	MQueryTimeMax         float32 `protobuf:"fixed32,26,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	MQueryTimeP99         float32 `protobuf:"fixed32,27,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MRowsSentCnt          float32 `protobuf:"fixed32,33,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	MRowsSentSum          float32 `protobuf:"fixed32,34,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin          float32 `protobuf:"fixed32,35,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax          float32 `protobuf:"fixed32,36,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99          float32 `protobuf:"fixed32,37,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MSharedBlksHitCnt     float32 `protobuf:"fixed32,200,opt,name=m_shared_blks_hit_cnt,json=mSharedBlksHitCnt,proto3" json:"m_shared_blks_hit_cnt,omitempty"`
	MSharedBlksHitSum     float32 `protobuf:"fixed32,201,opt,name=m_shared_blks_hit_sum,json=mSharedBlksHitSum,proto3" json:"m_shared_blks_hit_sum,omitempty"`
	MSharedBlksReadCnt    float32 `protobuf:"fixed32,202,opt,name=m_shared_blks_read_cnt,json=mSharedBlksReadCnt,proto3" json:"m_shared_blks_read_cnt,omitempty"`
	MSharedBlksReadSum    float32 `protobuf:"fixed32,203,opt,name=m_shared_blks_read_sum,json=mSharedBlksReadSum,proto3" json:"m_shared_blks_read_sum,omitempty"`
	MSharedBlksDirtiedCnt float32 `protobuf:"fixed32,204,opt,name=m_shared_blks_dirtied_cnt,json=mSharedBlksDirtiedCnt,proto3" json:"m_shared_blks_dirtied_cnt,omitempty"`
	MSharedBlksDirtiedSum float32 `protobuf:"fixed32,205,opt,name=m_shared_blks_dirtied_sum,json=mSharedBlksDirtiedSum,proto3" json:"m_shared_blks_dirtied_sum,omitempty"`
	MSharedBlksWrittenCnt float32 `protobuf:"fixed32,206,opt,name=m_shared_blks_written_cnt,json=mSharedBlksWrittenCnt,proto3" json:"m_shared_blks_written_cnt,omitempty"`
	MSharedBlksWrittenSum float32 `protobuf:"fixed32,207,opt,name=m_shared_blks_written_sum,json=mSharedBlksWrittenSum,proto3" json:"m_shared_blks_written_sum,omitempty"`
	MLocalBlksHitCnt      float32 `protobuf:"fixed32,208,opt,name=m_local_blks_hit_cnt,json=mLocalBlksHitCnt,proto3" json:"m_local_blks_hit_cnt,omitempty"`
	MLocalBlksHitSum      float32 `protobuf:"fixed32,209,opt,name=m_local_blks_hit_sum,json=mLocalBlksHitSum,proto3" json:"m_local_blks_hit_sum,omitempty"`
	MLocalBlksReadCnt     float32 `protobuf:"fixed32,210,opt,name=m_local_blks_read_cnt,json=mLocalBlksReadCnt,proto3" json:"m_local_blks_read_cnt,omitempty"`
	MLocalBlksReadSum     float32 `protobuf:"fixed32,211,opt,name=m_local_blks_read_sum,json=mLocalBlksReadSum,proto3" json:"m_local_blks_read_sum,omitempty"`
	MLocalBlksDirtiedCnt  float32 `protobuf:"fixed32,212,opt,name=m_local_blks_dirtied_cnt,json=mLocalBlksDirtiedCnt,proto3" json:"m_local_blks_dirtied_cnt,omitempty"`
	MLocalBlksDirtiedSum  float32 `protobuf:"fixed32,213,opt,name=m_local_blks_dirtied_sum,json=mLocalBlksDirtiedSum,proto3" json:"m_local_blks_dirtied_sum,omitempty"`
	MLocalBlksWrittenCnt  float32 `protobuf:"fixed32,214,opt,name=m_local_blks_written_cnt,json=mLocalBlksWrittenCnt,proto3" json:"m_local_blks_written_cnt,omitempty"`
	MLocalBlksWrittenSum  float32 `protobuf:"fixed32,215,opt,name=m_local_blks_written_sum,json=mLocalBlksWrittenSum,proto3" json:"m_local_blks_written_sum,omitempty"`
	MTempBlksReadCnt      float32 `protobuf:"fixed32,216,opt,name=m_temp_blks_read_cnt,json=mTempBlksReadCnt,proto3" json:"m_temp_blks_read_cnt,omitempty"`
	MTempBlksReadSum      float32 `protobuf:"fixed32,217,opt,name=m_temp_blks_read_sum,json=mTempBlksReadSum,proto3" json:"m_temp_blks_read_sum,omitempty"`
	MTempBlksWrittenCnt   float32 `protobuf:"fixed32,218,opt,name=m_temp_blks_written_cnt,json=mTempBlksWrittenCnt,proto3" json:"m_temp_blks_written_cnt,omitempty"`
	MTempBlksWrittenSum   float32 `protobuf:"fixed32,219,opt,name=m_temp_blks_written_sum,json=mTempBlksWrittenSum,proto3" json:"m_temp_blks_written_sum,omitempty"`
	MBlkReadTimeCnt       float32 `protobuf:"fixed32,220,opt,name=m_blk_read_time_cnt,json=mBlkReadTimeCnt,proto3" json:"m_blk_read_time_cnt,omitempty"`
	MBlkReadTimeSum       float32 `protobuf:"fixed32,221,opt,name=m_blk_read_time_sum,json=mBlkReadTimeSum,proto3" json:"m_blk_read_time_sum,omitempty"`
	MBlkWriteTimeCnt      float32 `protobuf:"fixed32,222,opt,name=m_blk_write_time_cnt,json=mBlkWriteTimeCnt,proto3" json:"m_blk_write_time_cnt,omitempty"`
	MBlkWriteTimeSum      float32 `protobuf:"fixed32,223,opt,name=m_blk_write_time_sum,json=mBlkWriteTimeSum,proto3" json:"m_blk_write_time_sum,omitempty"`
	MCpuUserTimeCnt       float32 `protobuf:"fixed32,230,opt,name=m_cpu_user_time_cnt,json=mCpuUserTimeCnt,proto3" json:"m_cpu_user_time_cnt,omitempty"`
	MCpuUserTimeSum       float32 `protobuf:"fixed32,231,opt,name=m_cpu_user_time_sum,json=mCpuUserTimeSum,proto3" json:"m_cpu_user_time_sum,omitempty"`
	MCpuSysTimeCnt        float32 `protobuf:"fixed32,232,opt,name=m_cpu_sys_time_cnt,json=mCpuSysTimeCnt,proto3" json:"m_cpu_sys_time_cnt,omitempty"`
	MCpuSysTimeSum        float32 `protobuf:"fixed32,233,opt,name=m_cpu_sys_time_sum,json=mCpuSysTimeSum,proto3" json:"m_cpu_sys_time_sum,omitempty"`
	CmdType               string  `protobuf:"bytes,246,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	//
	// pg_stat_monitor 0.9 metrics
	//
	// Total number of planned calls.
	MPlansCallsSum float32 `protobuf:"fixed32,234,opt,name=m_plans_calls_sum,json=mPlansCallsSum,proto3" json:"m_plans_calls_sum,omitempty"`
	MPlansCallsCnt float32 `protobuf:"fixed32,235,opt,name=m_plans_calls_cnt,json=mPlansCallsCnt,proto3" json:"m_plans_calls_cnt,omitempty"`
	// Total number of WAL (Write-ahead logging) records.
	MWalRecordsSum float32 `protobuf:"fixed32,236,opt,name=m_wal_records_sum,json=mWalRecordsSum,proto3" json:"m_wal_records_sum,omitempty"`
	MWalRecordsCnt float32 `protobuf:"fixed32,237,opt,name=m_wal_records_cnt,json=mWalRecordsCnt,proto3" json:"m_wal_records_cnt,omitempty"`
	// Total number of FPI (full page images) in WAL (Write-ahead logging) records.
	MWalFpiSum float32 `protobuf:"fixed32,238,opt,name=m_wal_fpi_sum,json=mWalFpiSum,proto3" json:"m_wal_fpi_sum,omitempty"`
	MWalFpiCnt float32 `protobuf:"fixed32,239,opt,name=m_wal_fpi_cnt,json=mWalFpiCnt,proto3" json:"m_wal_fpi_cnt,omitempty"`
	// Total bytes of WAL (Write-ahead logging) records.
	MWalBytesSum float32 `protobuf:"fixed32,240,opt,name=m_wal_bytes_sum,json=mWalBytesSum,proto3" json:"m_wal_bytes_sum,omitempty"`
	MWalBytesCnt float32 `protobuf:"fixed32,241,opt,name=m_wal_bytes_cnt,json=mWalBytesCnt,proto3" json:"m_wal_bytes_cnt,omitempty"`
	// Sum, count, min, max of plan time.
	MPlanTimeSum    float32  `protobuf:"fixed32,242,opt,name=m_plan_time_sum,json=mPlanTimeSum,proto3" json:"m_plan_time_sum,omitempty"`
	MPlanTimeCnt    float32  `protobuf:"fixed32,243,opt,name=m_plan_time_cnt,json=mPlanTimeCnt,proto3" json:"m_plan_time_cnt,omitempty"`
	MPlanTimeMin    float32  `protobuf:"fixed32,244,opt,name=m_plan_time_min,json=mPlanTimeMin,proto3" json:"m_plan_time_min,omitempty"`
	MPlanTimeMax    float32  `protobuf:"fixed32,245,opt,name=m_plan_time_max,json=mPlanTimeMax,proto3" json:"m_plan_time_max,omitempty"`
	TopQueryid      string   `protobuf:"bytes,247,opt,name=top_queryid,json=topQueryid,proto3" json:"top_queryid,omitempty"`
	TopQuery        string   `protobuf:"bytes,250,opt,name=top_query,json=topQuery,proto3" json:"top_query,omitempty"`
	ApplicationName string   `protobuf:"bytes,248,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	Planid          string   `protobuf:"bytes,249,opt,name=planid,proto3" json:"planid,omitempty"`
	QueryPlan       string   `protobuf:"bytes,251,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	HistogramItems  []string `protobuf:"bytes,252,rep,name=histogram_items,json=histogramItems,proto3" json:"histogram_items,omitempty"`
}

func (x *MetricsBucket) Reset() {
	*x = MetricsBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsBucket) ProtoMessage() {}

func (x *MetricsBucket) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsBucket.ProtoReflect.Descriptor instead.
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsBucket) GetQueryid() string {
	if x != nil {
		return x.Queryid
	}
	return ""
}

func (x *MetricsBucket) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *MetricsBucket) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MetricsBucket) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MetricsBucket) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MetricsBucket) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *MetricsBucket) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MetricsBucket) GetClientHost() string {
	if x != nil {
		return x.ClientHost
	}
	return ""
}

func (x *MetricsBucket) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MetricsBucket) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MetricsBucket) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *MetricsBucket) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *MetricsBucket) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *MetricsBucket) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *MetricsBucket) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *MetricsBucket) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *MetricsBucket) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MetricsBucket) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *MetricsBucket) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *MetricsBucket) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *MetricsBucket) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MetricsBucket) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MetricsBucket) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *MetricsBucket) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MetricsBucket) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricsBucket) GetPeriodStartUnixSecs() uint32 {
	if x != nil {
		return x.PeriodStartUnixSecs
	}
	return 0
}

func (x *MetricsBucket) GetPeriodLengthSecs() uint32 {
	if x != nil {
		return x.PeriodLengthSecs
	}
	return 0
}

func (x *MetricsBucket) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *MetricsBucket) GetIsTruncated() bool {
	if x != nil {
		return x.IsTruncated
	}
	return false
}

func (x *MetricsBucket) GetExampleMetrics() string {
	if x != nil {
		return x.ExampleMetrics
	}
	return ""
}

func (x *MetricsBucket) GetNumQueriesWithWarnings() float32 {
	if x != nil {
		return x.NumQueriesWithWarnings
	}
	return 0
}

func (x *MetricsBucket) GetWarnings() map[uint64]uint64 {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *MetricsBucket) GetNumQueriesWithErrors() float32 {
	if x != nil {
		return x.NumQueriesWithErrors
	}
	return 0
}

func (x *MetricsBucket) GetErrors() map[uint64]uint64 {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *MetricsBucket) GetNumQueries() float32 {
	if x != nil {
		return x.NumQueries
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeCnt() float32 {
	if x != nil {
		return x.MQueryTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeSum() float32 {
	if x != nil {
		return x.MQueryTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeMin() float32 {
	if x != nil {
		return x.MQueryTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeMax() float32 {
	if x != nil {
		return x.MQueryTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeP99() float32 {
	if x != nil {
		return x.MQueryTimeP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentCnt() float32 {
	if x != nil {
		return x.MRowsSentCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentSum() float32 {
	if x != nil {
		return x.MRowsSentSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentMin() float32 {
	if x != nil {
		return x.MRowsSentMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentMax() float32 {
	if x != nil {
		return x.MRowsSentMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentP99() float32 {
	if x != nil {
		return x.MRowsSentP99
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksHitCnt() float32 {
	if x != nil {
		return x.MSharedBlksHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksHitSum() float32 {
	if x != nil {
		return x.MSharedBlksHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksReadCnt() float32 {
	if x != nil {
		return x.MSharedBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksReadSum() float32 {
	if x != nil {
		return x.MSharedBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksDirtiedCnt() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksDirtiedSum() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksWrittenCnt() float32 {
	if x != nil {
		return x.MSharedBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksWrittenSum() float32 {
	if x != nil {
		return x.MSharedBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksHitCnt() float32 {
	if x != nil {
		return x.MLocalBlksHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksHitSum() float32 {
	if x != nil {
		return x.MLocalBlksHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksReadCnt() float32 {
	if x != nil {
		return x.MLocalBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksReadSum() float32 {
	if x != nil {
		return x.MLocalBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksDirtiedCnt() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksDirtiedSum() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksWrittenCnt() float32 {
	if x != nil {
		return x.MLocalBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksWrittenSum() float32 {
	if x != nil {
		return x.MLocalBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksReadCnt() float32 {
	if x != nil {
		return x.MTempBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksReadSum() float32 {
	if x != nil {
		return x.MTempBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksWrittenCnt() float32 {
	if x != nil {
		return x.MTempBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksWrittenSum() float32 {
	if x != nil {
		return x.MTempBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMBlkReadTimeCnt() float32 {
	if x != nil {
		return x.MBlkReadTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBlkReadTimeSum() float32 {
	if x != nil {
		return x.MBlkReadTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMBlkWriteTimeCnt() float32 {
	if x != nil {
		return x.MBlkWriteTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBlkWriteTimeSum() float32 {
	if x != nil {
		return x.MBlkWriteTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMCpuUserTimeCnt() float32 {
	if x != nil {
		return x.MCpuUserTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMCpuUserTimeSum() float32 {
	if x != nil {
		return x.MCpuUserTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMCpuSysTimeCnt() float32 {
	if x != nil {
		return x.MCpuSysTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMCpuSysTimeSum() float32 {
	if x != nil {
		return x.MCpuSysTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

func (x *MetricsBucket) GetMPlansCallsSum() float32 {
	if x != nil {
		return x.MPlansCallsSum
	}
	return 0
}

func (x *MetricsBucket) GetMPlansCallsCnt() float32 {
	if x != nil {
		return x.MPlansCallsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalRecordsSum() float32 {
	if x != nil {
		return x.MWalRecordsSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalRecordsCnt() float32 {
	if x != nil {
		return x.MWalRecordsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalFpiSum() float32 {
	if x != nil {
		return x.MWalFpiSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalFpiCnt() float32 {
	if x != nil {
		return x.MWalFpiCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalBytesSum() float32 {
	if x != nil {
		return x.MWalBytesSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalBytesCnt() float32 {
	if x != nil {
		return x.MWalBytesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeSum() float32 {
	if x != nil {
		return x.MPlanTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeCnt() float32 {
	if x != nil {
		return x.MPlanTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeMin() float32 {
	if x != nil {
		return x.MPlanTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeMax() float32 {
	if x != nil {
		return x.MPlanTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetTopQueryid() string {
	if x != nil {
		return x.TopQueryid
	}
	return ""
}

func (x *MetricsBucket) GetTopQuery() string {
	if x != nil {
		return x.TopQuery
	}
	return ""
}

func (x *MetricsBucket) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *MetricsBucket) GetPlanid() string {
	if x != nil {
		return x.Planid
	}
	return ""
}

func (x *MetricsBucket) GetQueryPlan() string {
	if x != nil {
		return x.QueryPlan
	}
	return ""
}

func (x *MetricsBucket) GetHistogramItems() []string {
	if x != nil {
		return x.HistogramItems
	}
	return nil
}

type ActivityCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivitySamples []*ActivitySample `protobuf:"bytes,1,rep,name=activity_samples,json=activitySamples,proto3" json:"activity_samples,omitempty"`
}

func (x *ActivityCollectRequest) Reset() {
	*x = ActivityCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCollectRequest) ProtoMessage() {}

func (x *ActivityCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCollectRequest.ProtoReflect.Descriptor instead.
func (*ActivityCollectRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityCollectRequest) GetActivitySamples() []*ActivitySample {
	if x != nil {
		return x.ActivitySamples
	}
	return nil
}

type ActivityCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivityCollectResponse) Reset() {
	*x = ActivityCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCollectResponse) ProtoMessage() {}

func (x *ActivityCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCollectResponse.ProtoReflect.Descriptor instead.
func (*ActivityCollectResponse) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{3}
}

type ActivitySamples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivitySamples []*ActivitySample `protobuf:"bytes,1,rep,name=activity_samples,json=activitySamples,proto3" json:"activity_samples,omitempty"`
}

func (x *ActivitySamples) Reset() {
	*x = ActivitySamples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySamples) ProtoMessage() {}

func (x *ActivitySamples) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySamples.ProtoReflect.Descriptor instead.
func (*ActivitySamples) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{4}
}

func (x *ActivitySamples) GetActivitySamples() []*ActivitySample {
	if x != nil {
		return x.ActivitySamples
	}
	return nil
}

type ActivitySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datname          string  `protobuf:"bytes,1,opt,name=datname,proto3" json:"datname,omitempty"`
	Pid              uint32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Usesysid         string  `protobuf:"bytes,3,opt,name=usesysid,proto3" json:"usesysid,omitempty"`
	Usename          string  `protobuf:"bytes,4,opt,name=usename,proto3" json:"usename,omitempty"`
	ApplicationName  string  `protobuf:"bytes,5,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	BackendType      string  `protobuf:"bytes,6,opt,name=backend_type,json=backendType,proto3" json:"backend_type,omitempty"`
	ClientHostname   string  `protobuf:"bytes,7,opt,name=client_hostname,json=clientHostname,proto3" json:"client_hostname,omitempty"`
	WaitEventType    string  `protobuf:"bytes,8,opt,name=wait_event_type,json=waitEventType,proto3" json:"wait_event_type,omitempty"`
	WaitEvent        string  `protobuf:"bytes,9,opt,name=wait_event,json=waitEvent,proto3" json:"wait_event,omitempty"`
	ParsedQuery      string  `protobuf:"bytes,10,opt,name=parsed_query,json=parsedQuery,proto3" json:"parsed_query,omitempty"`
	Query            string  `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
	State            string  `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	QueryStart       uint32  `protobuf:"varint,13,opt,name=query_start,json=queryStart,proto3" json:"query_start,omitempty"`
	Duration         float32 `protobuf:"fixed32,14,opt,name=duration,proto3" json:"duration,omitempty"`
	CurrentTimestamp uint32  `protobuf:"varint,15,opt,name=current_timestamp,json=currentTimestamp,proto3" json:"current_timestamp,omitempty"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,16,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32  `protobuf:"varint,17,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	QueryId          string  `protobuf:"bytes,21,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	CpuCores         float32 `protobuf:"fixed32,22,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	ClusterName      string  `protobuf:"bytes,18,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	InstanceName     string  `protobuf:"bytes,19,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	InstanceHost     string  `protobuf:"bytes,24,opt,name=instance_host,json=instanceHost,proto3" json:"instance_host,omitempty"`
	CollectorHost    string  `protobuf:"bytes,23,opt,name=collector_host,json=collectorHost,proto3" json:"collector_host,omitempty"`
}

func (x *ActivitySample) Reset() {
	*x = ActivitySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySample) ProtoMessage() {}

func (x *ActivitySample) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySample.ProtoReflect.Descriptor instead.
func (*ActivitySample) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{5}
}

func (x *ActivitySample) GetDatname() string {
	if x != nil {
		return x.Datname
	}
	return ""
}

func (x *ActivitySample) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ActivitySample) GetUsesysid() string {
	if x != nil {
		return x.Usesysid
	}
	return ""
}

func (x *ActivitySample) GetUsename() string {
	if x != nil {
		return x.Usename
	}
	return ""
}

func (x *ActivitySample) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ActivitySample) GetBackendType() string {
	if x != nil {
		return x.BackendType
	}
	return ""
}

func (x *ActivitySample) GetClientHostname() string {
	if x != nil {
		return x.ClientHostname
	}
	return ""
}

func (x *ActivitySample) GetWaitEventType() string {
	if x != nil {
		return x.WaitEventType
	}
	return ""
}

func (x *ActivitySample) GetWaitEvent() string {
	if x != nil {
		return x.WaitEvent
	}
	return ""
}

func (x *ActivitySample) GetParsedQuery() string {
	if x != nil {
		return x.ParsedQuery
	}
	return ""
}

func (x *ActivitySample) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ActivitySample) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ActivitySample) GetQueryStart() uint32 {
	if x != nil {
		return x.QueryStart
	}
	return 0
}

func (x *ActivitySample) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ActivitySample) GetCurrentTimestamp() uint32 {
	if x != nil {
		return x.CurrentTimestamp
	}
	return 0
}

func (x *ActivitySample) GetPeriodStartUnixSecs() uint32 {
	if x != nil {
		return x.PeriodStartUnixSecs
	}
	return 0
}

func (x *ActivitySample) GetPeriodLengthSecs() uint32 {
	if x != nil {
		return x.PeriodLengthSecs
	}
	return 0
}

func (x *ActivitySample) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *ActivitySample) GetCpuCores() float32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *ActivitySample) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ActivitySample) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ActivitySample) GetInstanceHost() string {
	if x != nil {
		return x.InstanceHost
	}
	return ""
}

func (x *ActivitySample) GetCollectorHost() string {
	if x != nil {
		return x.CollectorHost
	}
	return ""
}

type StatementsCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatementsCollectResponse) Reset() {
	*x = StatementsCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementsCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementsCollectResponse) ProtoMessage() {}

func (x *StatementsCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementsCollectResponse.ProtoReflect.Descriptor instead.
func (*StatementsCollectResponse) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{6}
}

type LogsCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParsedLogLines []*ParsedLogLine `protobuf:"bytes,1,rep,name=parsed_log_lines,json=parsedLogLines,proto3" json:"parsed_log_lines,omitempty"`
}

func (x *LogsCollectRequest) Reset() {
	*x = LogsCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsCollectRequest) ProtoMessage() {}

func (x *LogsCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsCollectRequest.ProtoReflect.Descriptor instead.
func (*LogsCollectRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{7}
}

func (x *LogsCollectRequest) GetParsedLogLines() []*ParsedLogLine {
	if x != nil {
		return x.ParsedLogLines
	}
	return nil
}

type ParsedLogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogTime              uint32 `protobuf:"varint,1,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	UserName             string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	DatabaseName         string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	ProcessId            uint32 `protobuf:"varint,4,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	ConnectionFrom       string `protobuf:"bytes,5,opt,name=connection_from,json=connectionFrom,proto3" json:"connection_from,omitempty"`
	SessionId            string `protobuf:"bytes,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionLineNum       int32  `protobuf:"varint,7,opt,name=session_line_num,json=sessionLineNum,proto3" json:"session_line_num,omitempty"`
	CommandTag           string `protobuf:"bytes,8,opt,name=command_tag,json=commandTag,proto3" json:"command_tag,omitempty"`
	SessionStartTime     uint32 `protobuf:"varint,9,opt,name=session_start_time,json=sessionStartTime,proto3" json:"session_start_time,omitempty"`
	VirtualTransactionId string `protobuf:"bytes,10,opt,name=virtual_transaction_id,json=virtualTransactionId,proto3" json:"virtual_transaction_id,omitempty"`
	TransactionId        int32  `protobuf:"varint,11,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ErrorSeverity        string `protobuf:"bytes,12,opt,name=error_severity,json=errorSeverity,proto3" json:"error_severity,omitempty"`
	SqlStateCode         string `protobuf:"bytes,13,opt,name=sql_state_code,json=sqlStateCode,proto3" json:"sql_state_code,omitempty"`
	Message              string `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`
	Detail               string `protobuf:"bytes,15,opt,name=detail,proto3" json:"detail,omitempty"`
	Hint                 string `protobuf:"bytes,16,opt,name=hint,proto3" json:"hint,omitempty"`
	InternalQuery        string `protobuf:"bytes,17,opt,name=internal_query,json=internalQuery,proto3" json:"internal_query,omitempty"`
	InternalQueryPos     int32  `protobuf:"varint,18,opt,name=internal_query_pos,json=internalQueryPos,proto3" json:"internal_query_pos,omitempty"`
	Context              string `protobuf:"bytes,19,opt,name=context,proto3" json:"context,omitempty"`
	Query                string `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	QueryPos             int32  `protobuf:"varint,21,opt,name=query_pos,json=queryPos,proto3" json:"query_pos,omitempty"`
	Location             string `protobuf:"bytes,22,opt,name=location,proto3" json:"location,omitempty"`
	ApplicationName      string `protobuf:"bytes,23,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	BackendType          string `protobuf:"bytes,24,opt,name=backend_type,json=backendType,proto3" json:"backend_type,omitempty"`
	LeaderPid            string `protobuf:"bytes,25,opt,name=leader_pid,json=leaderPid,proto3" json:"leader_pid,omitempty"`
	QueryId              string `protobuf:"bytes,26,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ClusterName          string `protobuf:"bytes,27,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	InstanceName         string `protobuf:"bytes,28,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *ParsedLogLine) Reset() {
	*x = ParsedLogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsedLogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedLogLine) ProtoMessage() {}

func (x *ParsedLogLine) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedLogLine.ProtoReflect.Descriptor instead.
func (*ParsedLogLine) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{8}
}

func (x *ParsedLogLine) GetLogTime() uint32 {
	if x != nil {
		return x.LogTime
	}
	return 0
}

func (x *ParsedLogLine) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ParsedLogLine) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *ParsedLogLine) GetProcessId() uint32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *ParsedLogLine) GetConnectionFrom() string {
	if x != nil {
		return x.ConnectionFrom
	}
	return ""
}

func (x *ParsedLogLine) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ParsedLogLine) GetSessionLineNum() int32 {
	if x != nil {
		return x.SessionLineNum
	}
	return 0
}

func (x *ParsedLogLine) GetCommandTag() string {
	if x != nil {
		return x.CommandTag
	}
	return ""
}

func (x *ParsedLogLine) GetSessionStartTime() uint32 {
	if x != nil {
		return x.SessionStartTime
	}
	return 0
}

func (x *ParsedLogLine) GetVirtualTransactionId() string {
	if x != nil {
		return x.VirtualTransactionId
	}
	return ""
}

func (x *ParsedLogLine) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ParsedLogLine) GetErrorSeverity() string {
	if x != nil {
		return x.ErrorSeverity
	}
	return ""
}

func (x *ParsedLogLine) GetSqlStateCode() string {
	if x != nil {
		return x.SqlStateCode
	}
	return ""
}

func (x *ParsedLogLine) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ParsedLogLine) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ParsedLogLine) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *ParsedLogLine) GetInternalQuery() string {
	if x != nil {
		return x.InternalQuery
	}
	return ""
}

func (x *ParsedLogLine) GetInternalQueryPos() int32 {
	if x != nil {
		return x.InternalQueryPos
	}
	return 0
}

func (x *ParsedLogLine) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ParsedLogLine) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ParsedLogLine) GetQueryPos() int32 {
	if x != nil {
		return x.QueryPos
	}
	return 0
}

func (x *ParsedLogLine) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ParsedLogLine) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ParsedLogLine) GetBackendType() string {
	if x != nil {
		return x.BackendType
	}
	return ""
}

func (x *ParsedLogLine) GetLeaderPid() string {
	if x != nil {
		return x.LeaderPid
	}
	return ""
}

func (x *ParsedLogLine) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *ParsedLogLine) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ParsedLogLine) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type LogsCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogsCollectResponse) Reset() {
	*x = LogsCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsCollectResponse) ProtoMessage() {}

func (x *LogsCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsCollectResponse.ProtoReflect.Descriptor instead.
func (*LogsCollectResponse) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{9}
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	InstanceName  string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	InstanceHost  string `protobuf:"bytes,3,opt,name=instance_host,json=instanceHost,proto3" json:"instance_host,omitempty"`
	CollectorHost string `protobuf:"bytes,4,opt,name=collector_host,json=collectorHost,proto3" json:"collector_host,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RegisterRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *RegisterRequest) GetInstanceHost() string {
	if x != nil {
		return x.InstanceHost
	}
	return ""
}

func (x *RegisterRequest) GetCollectorHost() string {
	if x != nil {
		return x.CollectorHost
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{11}
}

var File_collector_proto protoreflect.FileDescriptor

var file_collector_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x22, 0x62, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xe8, 0x1f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0xa6, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe0, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfd, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe2, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xe4,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x61, 0x7a, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x6e, 0x69,
	0x78, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6e, 0x75,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x10,
	0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x27,
	0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x39, 0x39, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x39, 0x39, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x39, 0x39, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69,
	0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73,
	0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x53,
	0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19,
	0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69,
	0x72, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x15, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72,
	0x74, 0x69, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x53,
	0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0xce, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42,
	0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x19, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42,
	0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d,
	0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd4, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x44,
	0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x53,
	0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd6,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62,
	0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd8, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd9, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42,
	0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x6d, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x6d, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x6d, 0x42, 0x6c, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xdf, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x6d, 0x42, 0x6c, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x6d, 0x43, 0x70, 0x75, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xe7, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x6d, 0x43, 0x70, 0x75, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x79, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x6d, 0x43, 0x70, 0x75, 0x53, 0x79, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x43,
	0x70, 0x75, 0x53, 0x79, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xea, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x57,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xed, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x57, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x66, 0x70, 0x69, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xee, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6d, 0x57, 0x61, 0x6c, 0x46, 0x70, 0x69, 0x53, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x70, 0x69, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xef, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x57, 0x61, 0x6c, 0x46, 0x70, 0x69, 0x43, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x57, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xf1, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x57, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xf3, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xf5, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x69, 0x64, 0x18,
	0xf7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x65, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x22, 0x98, 0x06, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x73, 0x79, 0x73, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x73, 0x79, 0x73, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x6e, 0x69,
	0x78, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x12,
	0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xca, 0x07,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x6f,
	0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x79, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x2a, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x73, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a,
	0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x67, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x56,
	0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x5e, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_collector_proto_rawDescOnce sync.Once
	file_collector_proto_rawDescData = file_collector_proto_rawDesc
)

func file_collector_proto_rawDescGZIP() []byte {
	file_collector_proto_rawDescOnce.Do(func() {
		file_collector_proto_rawDescData = protoimpl.X.CompressGZIP(file_collector_proto_rawDescData)
	})
	return file_collector_proto_rawDescData
}

var file_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_collector_proto_goTypes = []interface{}{
	(*StatementsCollectRequest)(nil),  // 0: borealis.v1beta1.StatementsCollectRequest
	(*MetricsBucket)(nil),             // 1: borealis.v1beta1.MetricsBucket
	(*ActivityCollectRequest)(nil),    // 2: borealis.v1beta1.ActivityCollectRequest
	(*ActivityCollectResponse)(nil),   // 3: borealis.v1beta1.ActivityCollectResponse
	(*ActivitySamples)(nil),           // 4: borealis.v1beta1.ActivitySamples
	(*ActivitySample)(nil),            // 5: borealis.v1beta1.ActivitySample
	(*StatementsCollectResponse)(nil), // 6: borealis.v1beta1.StatementsCollectResponse
	(*LogsCollectRequest)(nil),        // 7: borealis.v1beta1.LogsCollectRequest
	(*ParsedLogLine)(nil),             // 8: borealis.v1beta1.ParsedLogLine
	(*LogsCollectResponse)(nil),       // 9: borealis.v1beta1.LogsCollectResponse
	(*RegisterRequest)(nil),           // 10: borealis.v1beta1.RegisterRequest
	(*RegisterResponse)(nil),          // 11: borealis.v1beta1.RegisterResponse
	nil,                               // 12: borealis.v1beta1.MetricsBucket.LabelsEntry
	nil,                               // 13: borealis.v1beta1.MetricsBucket.WarningsEntry
	nil,                               // 14: borealis.v1beta1.MetricsBucket.ErrorsEntry
}
var file_collector_proto_depIdxs = []int32{
	1,  // 0: borealis.v1beta1.StatementsCollectRequest.metrics_bucket:type_name -> borealis.v1beta1.MetricsBucket
	12, // 1: borealis.v1beta1.MetricsBucket.labels:type_name -> borealis.v1beta1.MetricsBucket.LabelsEntry
	13, // 2: borealis.v1beta1.MetricsBucket.warnings:type_name -> borealis.v1beta1.MetricsBucket.WarningsEntry
	14, // 3: borealis.v1beta1.MetricsBucket.errors:type_name -> borealis.v1beta1.MetricsBucket.ErrorsEntry
	5,  // 4: borealis.v1beta1.ActivityCollectRequest.activity_samples:type_name -> borealis.v1beta1.ActivitySample
	5,  // 5: borealis.v1beta1.ActivitySamples.activity_samples:type_name -> borealis.v1beta1.ActivitySample
	8,  // 6: borealis.v1beta1.LogsCollectRequest.parsed_log_lines:type_name -> borealis.v1beta1.ParsedLogLine
	0,  // 7: borealis.v1beta1.StatementsCollector.Collect:input_type -> borealis.v1beta1.StatementsCollectRequest
	2,  // 8: borealis.v1beta1.ActivityCollector.Collect:input_type -> borealis.v1beta1.ActivityCollectRequest
	7,  // 9: borealis.v1beta1.LogsCollector.Collect:input_type -> borealis.v1beta1.LogsCollectRequest
	10, // 10: borealis.v1beta1.Collector.Register:input_type -> borealis.v1beta1.RegisterRequest
	6,  // 11: borealis.v1beta1.StatementsCollector.Collect:output_type -> borealis.v1beta1.StatementsCollectResponse
	3,  // 12: borealis.v1beta1.ActivityCollector.Collect:output_type -> borealis.v1beta1.ActivityCollectResponse
	9,  // 13: borealis.v1beta1.LogsCollector.Collect:output_type -> borealis.v1beta1.LogsCollectResponse
	11, // 14: borealis.v1beta1.Collector.Register:output_type -> borealis.v1beta1.RegisterResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_collector_proto_init() }
func file_collector_proto_init() {
	if File_collector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementsCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySamples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementsCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParsedLogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_collector_proto_goTypes,
		DependencyIndexes: file_collector_proto_depIdxs,
		MessageInfos:      file_collector_proto_msgTypes,
	}.Build()
	File_collector_proto = out.File
	file_collector_proto_rawDesc = nil
	file_collector_proto_goTypes = nil
	file_collector_proto_depIdxs = nil
}
