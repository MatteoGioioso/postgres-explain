// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: analytics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryAnalyticsClient is the client API for QueryAnalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAnalyticsClient interface {
	GetQueriesList(ctx context.Context, in *GetQueriesListRequest, opts ...grpc.CallOption) (*GetQueriesListResponse, error)
}

type queryAnalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAnalyticsClient(cc grpc.ClientConnInterface) QueryAnalyticsClient {
	return &queryAnalyticsClient{cc}
}

func (c *queryAnalyticsClient) GetQueriesList(ctx context.Context, in *GetQueriesListRequest, opts ...grpc.CallOption) (*GetQueriesListResponse, error) {
	out := new(GetQueriesListResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.QueryAnalytics/GetQueriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAnalyticsServer is the server API for QueryAnalytics service.
// All implementations must embed UnimplementedQueryAnalyticsServer
// for forward compatibility
type QueryAnalyticsServer interface {
	GetQueriesList(context.Context, *GetQueriesListRequest) (*GetQueriesListResponse, error)
	mustEmbedUnimplementedQueryAnalyticsServer()
}

// UnimplementedQueryAnalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedQueryAnalyticsServer struct {
}

func (UnimplementedQueryAnalyticsServer) GetQueriesList(context.Context, *GetQueriesListRequest) (*GetQueriesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueriesList not implemented")
}
func (UnimplementedQueryAnalyticsServer) mustEmbedUnimplementedQueryAnalyticsServer() {}

// UnsafeQueryAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAnalyticsServer will
// result in compilation errors.
type UnsafeQueryAnalyticsServer interface {
	mustEmbedUnimplementedQueryAnalyticsServer()
}

func RegisterQueryAnalyticsServer(s grpc.ServiceRegistrar, srv QueryAnalyticsServer) {
	s.RegisterService(&QueryAnalytics_ServiceDesc, srv)
}

func _QueryAnalytics_GetQueriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAnalyticsServer).GetQueriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.QueryAnalytics/GetQueriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAnalyticsServer).GetQueriesList(ctx, req.(*GetQueriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAnalytics_ServiceDesc is the grpc.ServiceDesc for QueryAnalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAnalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borealis.v1beta1.QueryAnalytics",
	HandlerType: (*QueryAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueriesList",
			Handler:    _QueryAnalytics_GetQueriesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}
