// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: collector.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatementsCollectorClient is the client API for StatementsCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatementsCollectorClient interface {
	// Collect accepts data from postgres-agent
	Collect(ctx context.Context, in *StatementsCollectRequest, opts ...grpc.CallOption) (*StatementsCollectResponse, error)
}

type statementsCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewStatementsCollectorClient(cc grpc.ClientConnInterface) StatementsCollectorClient {
	return &statementsCollectorClient{cc}
}

func (c *statementsCollectorClient) Collect(ctx context.Context, in *StatementsCollectRequest, opts ...grpc.CallOption) (*StatementsCollectResponse, error) {
	out := new(StatementsCollectResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.StatementsCollector/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatementsCollectorServer is the server API for StatementsCollector service.
// All implementations must embed UnimplementedStatementsCollectorServer
// for forward compatibility
type StatementsCollectorServer interface {
	// Collect accepts data from postgres-agent
	Collect(context.Context, *StatementsCollectRequest) (*StatementsCollectResponse, error)
	mustEmbedUnimplementedStatementsCollectorServer()
}

// UnimplementedStatementsCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedStatementsCollectorServer struct {
}

func (UnimplementedStatementsCollectorServer) Collect(context.Context, *StatementsCollectRequest) (*StatementsCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedStatementsCollectorServer) mustEmbedUnimplementedStatementsCollectorServer() {}

// UnsafeStatementsCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatementsCollectorServer will
// result in compilation errors.
type UnsafeStatementsCollectorServer interface {
	mustEmbedUnimplementedStatementsCollectorServer()
}

func RegisterStatementsCollectorServer(s grpc.ServiceRegistrar, srv StatementsCollectorServer) {
	s.RegisterService(&StatementsCollector_ServiceDesc, srv)
}

func _StatementsCollector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatementsCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementsCollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.StatementsCollector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementsCollectorServer).Collect(ctx, req.(*StatementsCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatementsCollector_ServiceDesc is the grpc.ServiceDesc for StatementsCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatementsCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borealis.v1beta1.StatementsCollector",
	HandlerType: (*StatementsCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _StatementsCollector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}

// ActivityCollectorClient is the client API for ActivityCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityCollectorClient interface {
	// Collect accepts data from postgres-agent
	Collect(ctx context.Context, in *ActivityCollectRequest, opts ...grpc.CallOption) (*ActivityCollectResponse, error)
}

type activityCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityCollectorClient(cc grpc.ClientConnInterface) ActivityCollectorClient {
	return &activityCollectorClient{cc}
}

func (c *activityCollectorClient) Collect(ctx context.Context, in *ActivityCollectRequest, opts ...grpc.CallOption) (*ActivityCollectResponse, error) {
	out := new(ActivityCollectResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.ActivityCollector/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityCollectorServer is the server API for ActivityCollector service.
// All implementations must embed UnimplementedActivityCollectorServer
// for forward compatibility
type ActivityCollectorServer interface {
	// Collect accepts data from postgres-agent
	Collect(context.Context, *ActivityCollectRequest) (*ActivityCollectResponse, error)
	mustEmbedUnimplementedActivityCollectorServer()
}

// UnimplementedActivityCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedActivityCollectorServer struct {
}

func (UnimplementedActivityCollectorServer) Collect(context.Context, *ActivityCollectRequest) (*ActivityCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedActivityCollectorServer) mustEmbedUnimplementedActivityCollectorServer() {}

// UnsafeActivityCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityCollectorServer will
// result in compilation errors.
type UnsafeActivityCollectorServer interface {
	mustEmbedUnimplementedActivityCollectorServer()
}

func RegisterActivityCollectorServer(s grpc.ServiceRegistrar, srv ActivityCollectorServer) {
	s.RegisterService(&ActivityCollector_ServiceDesc, srv)
}

func _ActivityCollector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityCollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.ActivityCollector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityCollectorServer).Collect(ctx, req.(*ActivityCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityCollector_ServiceDesc is the grpc.ServiceDesc for ActivityCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borealis.v1beta1.ActivityCollector",
	HandlerType: (*ActivityCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _ActivityCollector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}

// LogsCollectorClient is the client API for LogsCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsCollectorClient interface {
	Collect(ctx context.Context, in *LogsCollectRequest, opts ...grpc.CallOption) (*LogsCollectResponse, error)
}

type logsCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsCollectorClient(cc grpc.ClientConnInterface) LogsCollectorClient {
	return &logsCollectorClient{cc}
}

func (c *logsCollectorClient) Collect(ctx context.Context, in *LogsCollectRequest, opts ...grpc.CallOption) (*LogsCollectResponse, error) {
	out := new(LogsCollectResponse)
	err := c.cc.Invoke(ctx, "/borealis.v1beta1.LogsCollector/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsCollectorServer is the server API for LogsCollector service.
// All implementations must embed UnimplementedLogsCollectorServer
// for forward compatibility
type LogsCollectorServer interface {
	Collect(context.Context, *LogsCollectRequest) (*LogsCollectResponse, error)
	mustEmbedUnimplementedLogsCollectorServer()
}

// UnimplementedLogsCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedLogsCollectorServer struct {
}

func (UnimplementedLogsCollectorServer) Collect(context.Context, *LogsCollectRequest) (*LogsCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedLogsCollectorServer) mustEmbedUnimplementedLogsCollectorServer() {}

// UnsafeLogsCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsCollectorServer will
// result in compilation errors.
type UnsafeLogsCollectorServer interface {
	mustEmbedUnimplementedLogsCollectorServer()
}

func RegisterLogsCollectorServer(s grpc.ServiceRegistrar, srv LogsCollectorServer) {
	s.RegisterService(&LogsCollector_ServiceDesc, srv)
}

func _LogsCollector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsCollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borealis.v1beta1.LogsCollector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsCollectorServer).Collect(ctx, req.(*LogsCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsCollector_ServiceDesc is the grpc.ServiceDesc for LogsCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borealis.v1beta1.LogsCollector",
	HandlerType: (*LogsCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _LogsCollector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}
